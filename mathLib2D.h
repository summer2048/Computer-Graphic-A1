/**
 * Do not edit this file. Do not submit changes to this file.
 *
 * We will mark your submission with this original copy of the mathLib2D.h.
 * Modifications will not even be seen by the course staff.
 *
 * If you edit this file you may receive an automatic zero on this assignment.
 *
 * If the compiler gave you an error message pointing at this file then it
 * means that your source file is not correctly implementing this header file.
 *
 * Your task is ONLY to produce mathLib2D.cpp by implementing these class and
 * function prototypes below.
 *
 * You are free to use these in future assignments. This header
 * file must remain the same however. For those interested, we are not worried
 * about the possible performance hit from C++'s "copy semantics". The compiler
 * is very good at optimizing these operations. Furthermore, we have settled on
 * float instead of double or type parameters. This choice is sufficient for
 * the course but you are again free to do what you wish in future assignments.
 */
#ifndef MATHLIB_2D_H
#define MATHLIB_2D_H

using namespace std;

class Point2D {
public:
    Point2D();
    Point2D(float inX, float inY);
    float mX;
    float mY;

    float distanceTo(Point2D other);
    float fastDistanceTo(Point2D other);
};

class Vec2D {
public:
    Vec2D();
    Vec2D(float inX, float inY);
    float mX;
    float mY;
    float length();
    Vec2D normalize();
    Vec2D addVec(Vec2D vec);
    Vec2D multiply(float scalar);
    Point2D movePoint(Point2D source);

    static Vec2D createVector(Point2D p1, Point2D p2);
};

class Position {
public:
    Point2D point;
    Position();
    Position(float x, float y);
};

class Color {
public:
    static const int RED = 0;
    static const int GREEN = 1;
    static const int BLUE = 2;
    static const int YELLOW = 3;
    static const int CYAN = 4;
    static const int PURPLE = 5;
    int colorId; // 0-5, 6 colors in tatal.
    float r,g,b;
    Color();
    Color(int color);
    void scumble(int value);
};

class Direction {
public:
    Vec2D vec;
    Direction();
};

class Particle {
public:
    static const int DEFAULT_LIFE_DURATION = 1800;
    Position position;
    Color color;
    Direction direction;
    float speed = 1.0f;
    int size;
    int life_duration_left; // Number of FPS it exists.
    Particle();
    Particle(float x, float y);
    // Particle(float x, float y, int colorId);
};

#endif
